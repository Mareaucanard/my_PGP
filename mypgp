#!/bin/python3

from rsa import generatekey, crypt_rsa, decrypt_rsa, generate_prime
import argparse
from utils import flatten, chunks_padded, show_hex, string_to_hex_string, hex_string_to_string, pad_string, chunks
from xor import apply_xor
from aes import encrypt_aes, decrypt_aes
from sys import stdin, stderr, setrecursionlimit
from os import set_blocking

setrecursionlimit(10 ** 5)


def hex_int(x):
    return int(x, 16)

def parsearg():
    parser = argparse.ArgumentParser(usage='mypgd [-xor | -aes | -rsa] [-c | -d] [-b] KEY\nthe MESSAGE is read from standard input', description='MyPGP - encryption/decryption tool')

    algorithm_group = parser.add_argument_group("Encryption Algorithm")
    algorithm_group.add_argument("-xor", action="store_true", help="Use Xor encryption")
    algorithm_group.add_argument("-aes", action="store_true", help="Use Aes encryption")
    algorithm_group.add_argument("-rsa", action="store_true", help="Use Rsa encryption")
    algorithm_group.add_argument("-pgp", action="store_true", help="PGP mode")

    mode_group = parser.add_argument_group("Encryption Mode")
    mode_group.add_argument("-c", action="store_true", help="Encrypt")
    mode_group.add_argument("-d", action="store_true", help="Decrypt")
    mode_group.add_argument("-genkey", action="store_true", help="Gen key for pgp")

    parser.add_argument("-b", action="store_true", help="Use batch mode")
    parser.add_argument("-g", nargs=2, metavar=("P", "Q"), type=hex_int,help="for RSA only: generate a public and private key\npair from the prime number P and Q")
    parser.add_argument("KEY", nargs='?', help="Encryption/Decryption key")
    parser.add_argument("--debug", action="store_true", help="Show debug information")

    args = parser.parse_args()

    if not (args.xor or args.aes or args.rsa or args.pgp):
        parser.error("You must specify an encryption algorithm: -xor, -aes, -rsa, or -pgp")
    if (sum([args.xor, args.aes, args.rsa, args.pgp]) > 1):
        parser.error("You can only select one encryption algorithm: -xor, -aes, -rsa, or -pgp")
    if args.rsa and args.b:
        parser.error("You can not use -b with -rsa")
    if args.g and args.rsa == False:
        parser.error("You can not use -g without -rsa")
    if (not (args.c or args.d)) and (not args.g) and not (args.genkey):
        parser.error("You must specify an encryption mode: -c (encrypt) or -d (decrypt)")
    if (args.c and args.d) and (not args.g):
        parser.error("You can only select one encryption mode: -c (encrypt) or -d (decrypt)")
    if (args.pgp and args.b):
        parser.error("You can not use -b with -pgp")
    if ((args.c or args.d) and args.KEY is None):
        parser.error("Key missing")
    return args

def get_input(block_mode: bool, key: bytearray) -> bytearray:
    if block_mode:
        set_blocking(stdin.fileno(), False)
        message = stdin.read(len(key) * 2)
        set_blocking(stdin.fileno(), True)
    else:
        message = stdin.read()
    return flatten(message)

def main():
    try:
        args = parsearg()
    except SystemExit as e:
        if e.code == 2:
            exit(84)
        else:
            exit(e.code)
    if args.g:
        generatekey(args.g[0], args.g[1])
    if args.rsa and args.c:
        message = input()
        print(crypt_rsa(args.KEY, message))
    elif args.rsa and args.d:
        message = input()
        print(decrypt_rsa(args.KEY, message))
    if args.xor:
        key = flatten(args.KEY)
        message = get_input(args.b, key)
        print(apply_xor(message, key))
    elif args.aes:
        key = flatten(args.KEY)
        message = get_input(args.b, key)
        f = encrypt_aes if args.c else decrypt_aes
        if args.debug:
            print(f"Block size: {16}", file=stderr)
        print(''.join(show_hex(f(block, key)) for block in chunks_padded(message, 16)))
    elif args.pgp:
        if args.c:
            message = stdin.read()
            (_, n) = args.KEY.split('-')
            expected_size = len(n)
            block_size = len(n) // 2
            if args.debug:
                print(f"Key len is {expected_size}, block size {block_size}", file=stderr)
                print(f"Message length is {len(message) * 2 // block_size}", file=stderr)
                print(f"Plain text is: {(message)}", file=stderr)
                print(f"Hexadecimal message: {string_to_hex_string(message)}", file=stderr)
            for block in chunks(string_to_hex_string(message), block_size):
                tmp = crypt_rsa(args.KEY, block)
                if args.debug:
                    print(f"block {block} => {tmp}", file=stderr)
                print(pad_string(tmp, expected_size), flush=False, end='')
        elif args.d:
            message = stdin.read()
            (_, n) = args.KEY.split('-')
            for block in chunks(message, len(n)):
                tmp = decrypt_rsa(args.KEY, block)
                if len(tmp) % 2 != 0:
                    tmp = "0" + tmp
                if args.debug:
                    print(f"block {block} => {tmp}", file=stderr)
                print(hex_string_to_string(tmp), end='')
        else:
            x = generate_prime()
            y = generate_prime()
            while x == y:
                y = generate_prime()
            generatekey(x, y)


if __name__ == "__main__":
    try:
        main()
    except Exception as err:
        print(err, file=stderr)
        exit(84)
